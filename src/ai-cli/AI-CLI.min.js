async function fetchWithRetry(r,o,t=5){let e=null;for(let n=0;n<t;n++){try{const t=await fetch(r,o);if(t.ok)return t;e=new Error(`HTTP Error: ${t.status} ${t.statusText}`),console.warn(`%c[AI-CLI] Request failed, retrying in ${Math.pow(2,n)} seconds...`,"color: orange;")}catch(a){e=a,console.warn(`%c[AI-CLI] Network error, retrying in ${Math.pow(2,n)} seconds...`,"color: orange;")}if(n<t-1)await new Promise(r=>setTimeout(r,1e3*Math.pow(2,n)))}throw new Error(`[AI-CLI] Failed to fetch content after ${t} attempts. Last error: ${e.message}`)}window.ai=async function(...r){const o=r.join(" ");if(o.trim()===""){console.error("Please provide a text query, e.g., ai('write a short poem about coding').");return}const t="",e=`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${t}`,n=typeof __app_id!=="undefined"?__app_id:"default-cli-app";console.log(`%c[AI-CLI] Asking Gemini... (App ID: ${n})`,"color: #007bff; font-weight: bold;"),console.time("AI Response Time");try{const r="You are an AI CLI tool running in a developer console. Your responses must be concise, direct, and highly informative, formatted for quick consumption in a command-line environment. Do not use unnecessary greetings or conversational padding. Directly answer the user's query.",a={contents:[{parts:[{text:o}]}],tools:[{google_search:{}}],systemInstruction:{parts:[{text:r}]}},i={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)},l=await fetchWithRetry(e,i),s=await l.json();console.timeEnd("AI Response Time");const c=s.candidates?.[0];if(c&&c.content?.parts?.[0]?.text){const r=c.content.parts[0].text;let t=[];const e=c.groundingMetadata;e&&e.groundingAttributions&&(t=e.groundingAttributions.map(r=>({uri:r.web?.uri,title:r.web?.title})).filter(r=>r.uri&&r.title)),console.log(`%c=========================================`, "color: #007bff;"),console.log(`%cQuery: ${o}`,"font-weight: bold; color: #1e8449;"),console.log(`%cResponse:`,"font-weight: bold; color: #007bff;"),console.log(r),console.log(`%c=========================================`, "color: #007bff;"),t.length>0&&(console.log(`%cSources Found:`,"font-weight: bold; color: #ff9800;"),t.forEach((r,t)=>{console.log(`[${t+1}] %c${r.title}`,"font-weight: 500;",`(${r.uri})`)}),console.log(`%c-----------------------------------------`, "color: #007bff;"))}else s.error?(console.error(`%c[API Error] ${s.error.message}`,"color: red; font-weight: bold;")):((console.error("%c[AI-CLI] No text response received from the API. Check the full response for errors.","color: red;")),console.log("Full API response:",s))}catch(d){console.timeEnd("AI Response Time"),console.error(`%c[AI-CLI Critical Error] An unexpected error occurred: ${d.message}`,"color: darkred; font-weight: bold;")}};console.log('%cAI-CLI.js loaded. Type ai("your query") in the console to get started.', "color: green; font-weight: bold; padding: 5px; border: 1px solid green;");
