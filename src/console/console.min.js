(function(){let c=1;const m={},v=1;const o={log:console.log,warn:console.warn,error:console.error,info:console.info,debug:console.debug,clear:console.clear};let i=false;const t=e=>e.map(e=>{if(typeof e==="object"&&e!==null){try{return JSON.stringify(e,null,2)}catch(t){return String(e)}}return String(e)}).join(" ");const n=(e,n)=>{const r=c++;const a=`(MID: ${r})`;const s=t(n);m[r]={type:e,content:s};const l=[a,...n];o[e].apply(console,l);return r};["log","warn","error"].forEach(e=>{console[e]=function(...t){n(e,t)}});window.onerror=function(e,t,n,a,s){if(i){return false}i=true;const l=s&&s.stack?s.stack:`${e}. Source: ${t}:${n}:${a}`;const r=c++;m[r]={type:"error",content:l};setTimeout(()=>{o.error(`%c\u2B06 [CONSOLE.JS] MID: ${r}. To read aloud, run: play(${r})`,"color: #0D47A1; font-weight: bold; background-color: #E3F2FD; padding: 1px 4px; border-radius: 3px;")},50);i=false;return true};window.addEventListener("unhandledrejection",e=>{const t=e.reason;let r="Unhandled Promise Rejection";if(t){if(t instanceof Error){r=`Unhandled Promise Rejection: ${t.stack||t.message}`}else{r=`Unhandled Promise Rejection: ${String(t)}`}}n("error",[r,t]);e.preventDefault()});const r=e=>{const t=parseInt(e,10);const n=window.speechSynthesis;if(isNaN(t)||t<1){o.error("Console.js Error: Please provide a valid numeric message ID (e.g., play(5)).");return}if(!m[t]){o.error(`Console.js Error: Message ID ${t} not found. The message may have been generated before Console.js was loaded.`);return}const i=m[t];o.debug(`Reading message ID: ${t}`);if(n&&n.speak){n.cancel();const e=`Message ID ${t}, type ${i.type}. The content is: ${i.content}`;const r=new SpeechSynthesisUtterance(e);r.pitch=1;r.rate=1;r.volume=v;n.speak(r);o.debug(`%c[TTS] Message ${t} sent to speaker (Volume: ${v*100}%).`,"color: white; background-color: #03A9F4; padding: 2px 5px; border-radius: 3px; font-weight: bold;")}else{o.warn("Console.js Warning: Text-to-Speech API is not available or restricted in this environment. Simulating read aloud...");o.debug(`%c[SIMULATED TTS] ${i.type.toUpperCase()} Message ${t}: %c${i.content}`,"color: white; background-color: #FF5722; padding: 2px 5px; border-radius: 3px; font-weight: bold;","color: #212121; font-style: italic;")}};window.play=r;window.play.mid={};window.play.mid.recent=function(){if(c<=1){o.info("No logged messages yet.");return}const t=c-1;const n=m[t];o.info(`%cMost Recent MID: ${t}`,"font-weight: bold;");o.log(`Type: ${n.type.toUpperCase()}`);o.log(`Content: ${n.content.substring(0,100)}...`);o.log(`To play this message, run: %cplay(${t})`,"font-family: monospace; background-color: #e0e0e0; padding: 2px 4px; border-radius: 3px;")};window.play.mid.list=function(){if(c<=1){o.info("No logged messages yet.");return}o.info("%c--- Console.js Message List ---","font-weight: bold; color: #673AB7;");for(let t=1;t<c;t++){const n=m[t];const i=n.content.substring(0,80).replace(/\n/g," ")+(n.content.length>80?"...":"");o.log(`(MID: ${t}) [${n.type.toUpperCase()}]: ${i}`)}o.info(`Total Messages: ${c-1}`)};Object.defineProperty(window.play,"vol",{get:()=>v*100,set:e=>{const t=parseFloat(e);if(isNaN(t)||t<0||t>100){o.error("Console.js Error: Volume must be a number between 0 and 100.");return}v=t/100;o.info(`TTS Volume set to: %c${t}%`,"font-weight: bold; color: #00BCD4;")},configurable:true});window.play.help=function(){const e=`\n%c--- Console.js Command Help ---%c\nThe core function is %cplay(mid)%c. Use a Message ID (MID) found next to a console message.\n\n%cMessage Management:%c\n- %cplay.mid.recent%c: Shows the last message ID and its content.\n- %cplay.mid.list%c: Lists all logged messages with their MIDs and snippets.\n\n%cVolume Control (0-100):%c\n- %cplay.vol%c: Displays the current volume (0-100).\n- %cplay.vol = 75%c: Sets the TTS volume level. (e.g., setting it to 75%)\n\n%cInformation:%c\n- %cplay.help%c: Shows this help message.\n\nCurrent Volume: ${window.play.vol}%\n        `;o.info(e,"font-weight: bold; color: #3F51B5;","","font-family: monospace; background-color: #e0e0e0; padding: 1px 3px; border-radius: 2px;","","font-weight: bold; color: #4CAF50;","","font-family: monospace; background-color: #e0e0e0; padding: 1px 3px; border-radius: 2px;","","font-family: monospace; background-color: #e0e0e0; padding: 1px 3px; border-radius: 2px;","","font-weight: bold; color: #FF9800;","","font-family: monospace; background-color: #e0e0e0; padding: 1px 3px; border-radius: 2px;","font-family: monospace; background-color: #e0e0e0; padding: 1px 3px; border-radius: 2px;","","font-weight: bold; color: #9C27B0;","","font-family: monospace; background-color: #e0e0e0; padding: 1px 3px; border-radius: 2px;")};o.log("%cConsole.js Initialized","color: #4CAF50; font-weight: bold; font-size: 14px;");o.log("Thank you for using Console.js.");o.log("To read aloud an error message (TTS/simulation), please look for the %c\u2B06 [CONSOLE.JS]%c message and use its MID, or type %cplay.help%c for a list of commands.","font-family: monospace; color: #1565C0; font-weight: bold;","","font-family: monospace; background-color: #e0e0e0; padding: 2px 4px; border-radius: 3px;","")})();
